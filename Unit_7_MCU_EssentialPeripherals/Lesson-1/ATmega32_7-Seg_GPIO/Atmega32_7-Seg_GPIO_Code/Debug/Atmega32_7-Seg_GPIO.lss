
Atmega32_7-Seg_GPIO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000258  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000354  00000000  00000000  000002ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      0000028e  00000000  00000000  00000600  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 fe 00 	call	0x1fc	; 0x1fc <main>
  64:	0c 94 2a 01 	jmp	0x254	; 0x254 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <wait>:
 *      Author: Mohamed Magdi
 */

#include "DIO.h"

void wait(int time){
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	00 d0       	rcall	.+0      	; 0x72 <wait+0x6>
  72:	00 d0       	rcall	.+0      	; 0x74 <wait+0x8>
  74:	00 d0       	rcall	.+0      	; 0x76 <wait+0xa>
  76:	cd b7       	in	r28, 0x3d	; 61
  78:	de b7       	in	r29, 0x3e	; 62
  7a:	9e 83       	std	Y+6, r25	; 0x06
  7c:	8d 83       	std	Y+5, r24	; 0x05
	int i, j;
	for(i = 0; i < time; i++){
  7e:	1c 82       	std	Y+4, r1	; 0x04
  80:	1b 82       	std	Y+3, r1	; 0x03
  82:	12 c0       	rjmp	.+36     	; 0xa8 <wait+0x3c>
		for(j = 0; j < 255; j++);
  84:	1a 82       	std	Y+2, r1	; 0x02
  86:	19 82       	std	Y+1, r1	; 0x01
  88:	05 c0       	rjmp	.+10     	; 0x94 <wait+0x28>
  8a:	89 81       	ldd	r24, Y+1	; 0x01
  8c:	9a 81       	ldd	r25, Y+2	; 0x02
  8e:	01 96       	adiw	r24, 0x01	; 1
  90:	9a 83       	std	Y+2, r25	; 0x02
  92:	89 83       	std	Y+1, r24	; 0x01
  94:	89 81       	ldd	r24, Y+1	; 0x01
  96:	9a 81       	ldd	r25, Y+2	; 0x02
  98:	8f 3f       	cpi	r24, 0xFF	; 255
  9a:	91 05       	cpc	r25, r1
  9c:	b4 f3       	brlt	.-20     	; 0x8a <wait+0x1e>

#include "DIO.h"

void wait(int time){
	int i, j;
	for(i = 0; i < time; i++){
  9e:	8b 81       	ldd	r24, Y+3	; 0x03
  a0:	9c 81       	ldd	r25, Y+4	; 0x04
  a2:	01 96       	adiw	r24, 0x01	; 1
  a4:	9c 83       	std	Y+4, r25	; 0x04
  a6:	8b 83       	std	Y+3, r24	; 0x03
  a8:	2b 81       	ldd	r18, Y+3	; 0x03
  aa:	3c 81       	ldd	r19, Y+4	; 0x04
  ac:	8d 81       	ldd	r24, Y+5	; 0x05
  ae:	9e 81       	ldd	r25, Y+6	; 0x06
  b0:	28 17       	cp	r18, r24
  b2:	39 07       	cpc	r19, r25
  b4:	3c f3       	brlt	.-50     	; 0x84 <wait+0x18>
		for(j = 0; j < 255; j++);
	}
}
  b6:	26 96       	adiw	r28, 0x06	; 6
  b8:	0f b6       	in	r0, 0x3f	; 63
  ba:	f8 94       	cli
  bc:	de bf       	out	0x3e, r29	; 62
  be:	0f be       	out	0x3f, r0	; 63
  c0:	cd bf       	out	0x3d, r28	; 61
  c2:	cf 91       	pop	r28
  c4:	df 91       	pop	r29
  c6:	08 95       	ret

000000c8 <display3LedBuzzer>:

void display3LedBuzzer() {
  c8:	df 93       	push	r29
  ca:	cf 93       	push	r28
  cc:	cd b7       	in	r28, 0x3d	; 61
  ce:	de b7       	in	r29, 0x3e	; 62
	SetPin(PORTD, 5);
  d0:	a2 e3       	ldi	r26, 0x32	; 50
  d2:	b0 e0       	ldi	r27, 0x00	; 0
  d4:	e2 e3       	ldi	r30, 0x32	; 50
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	80 81       	ld	r24, Z
  da:	80 62       	ori	r24, 0x20	; 32
  dc:	8c 93       	st	X, r24
	wait(600);
  de:	88 e5       	ldi	r24, 0x58	; 88
  e0:	92 e0       	ldi	r25, 0x02	; 2
  e2:	0e 94 36 00 	call	0x6c	; 0x6c <wait>
	ClearPin(PORTD, 5);
  e6:	a2 e3       	ldi	r26, 0x32	; 50
  e8:	b0 e0       	ldi	r27, 0x00	; 0
  ea:	e2 e3       	ldi	r30, 0x32	; 50
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	80 81       	ld	r24, Z
  f0:	8f 7d       	andi	r24, 0xDF	; 223
  f2:	8c 93       	st	X, r24
	SetPin(PORTD, 6);
  f4:	a2 e3       	ldi	r26, 0x32	; 50
  f6:	b0 e0       	ldi	r27, 0x00	; 0
  f8:	e2 e3       	ldi	r30, 0x32	; 50
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	80 81       	ld	r24, Z
  fe:	80 64       	ori	r24, 0x40	; 64
 100:	8c 93       	st	X, r24
	wait(600);
 102:	88 e5       	ldi	r24, 0x58	; 88
 104:	92 e0       	ldi	r25, 0x02	; 2
 106:	0e 94 36 00 	call	0x6c	; 0x6c <wait>
	ClearPin(PORTD, 6);
 10a:	a2 e3       	ldi	r26, 0x32	; 50
 10c:	b0 e0       	ldi	r27, 0x00	; 0
 10e:	e2 e3       	ldi	r30, 0x32	; 50
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 81       	ld	r24, Z
 114:	8f 7b       	andi	r24, 0xBF	; 191
 116:	8c 93       	st	X, r24
	SetPin(PORTD, 7);
 118:	a2 e3       	ldi	r26, 0x32	; 50
 11a:	b0 e0       	ldi	r27, 0x00	; 0
 11c:	e2 e3       	ldi	r30, 0x32	; 50
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	80 81       	ld	r24, Z
 122:	80 68       	ori	r24, 0x80	; 128
 124:	8c 93       	st	X, r24
	wait(600);
 126:	88 e5       	ldi	r24, 0x58	; 88
 128:	92 e0       	ldi	r25, 0x02	; 2
 12a:	0e 94 36 00 	call	0x6c	; 0x6c <wait>
	ClearPin(PORTD, 7);
 12e:	a2 e3       	ldi	r26, 0x32	; 50
 130:	b0 e0       	ldi	r27, 0x00	; 0
 132:	e2 e3       	ldi	r30, 0x32	; 50
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	80 81       	ld	r24, Z
 138:	8f 77       	andi	r24, 0x7F	; 127
 13a:	8c 93       	st	X, r24
	SetPin(PORTD, 4);
 13c:	a2 e3       	ldi	r26, 0x32	; 50
 13e:	b0 e0       	ldi	r27, 0x00	; 0
 140:	e2 e3       	ldi	r30, 0x32	; 50
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	80 81       	ld	r24, Z
 146:	80 61       	ori	r24, 0x10	; 16
 148:	8c 93       	st	X, r24
	wait(600);
 14a:	88 e5       	ldi	r24, 0x58	; 88
 14c:	92 e0       	ldi	r25, 0x02	; 2
 14e:	0e 94 36 00 	call	0x6c	; 0x6c <wait>
	ClearPin(PORTD, 4);
 152:	a2 e3       	ldi	r26, 0x32	; 50
 154:	b0 e0       	ldi	r27, 0x00	; 0
 156:	e2 e3       	ldi	r30, 0x32	; 50
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	80 81       	ld	r24, Z
 15c:	8f 7e       	andi	r24, 0xEF	; 239
 15e:	8c 93       	st	X, r24
}
 160:	cf 91       	pop	r28
 162:	df 91       	pop	r29
 164:	08 95       	ret

00000166 <display7Segements>:

void display7Segements() {
 166:	df 93       	push	r29
 168:	cf 93       	push	r28
 16a:	00 d0       	rcall	.+0      	; 0x16c <display7Segements+0x6>
 16c:	00 d0       	rcall	.+0      	; 0x16e <display7Segements+0x8>
 16e:	cd b7       	in	r28, 0x3d	; 61
 170:	de b7       	in	r29, 0x3e	; 62
	int i, j;
	// Configure PORTC Pins As Output.
	DDRC = 0xff;
 172:	e4 e3       	ldi	r30, 0x34	; 52
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	8f ef       	ldi	r24, 0xFF	; 255
 178:	80 83       	st	Z, r24
	// Display 7-segments
	for(i = 0; i < 10; i++){
 17a:	1c 82       	std	Y+4, r1	; 0x04
 17c:	1b 82       	std	Y+3, r1	; 0x03
 17e:	32 c0       	rjmp	.+100    	; 0x1e4 <display7Segements+0x7e>
		for(j = 0; j < 10; j++){
 180:	1a 82       	std	Y+2, r1	; 0x02
 182:	19 82       	std	Y+1, r1	; 0x01
 184:	25 c0       	rjmp	.+74     	; 0x1d0 <display7Segements+0x6a>
			PORTC = 0b1011 | (i << 4);
 186:	e5 e3       	ldi	r30, 0x35	; 53
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	8b 81       	ldd	r24, Y+3	; 0x03
 18c:	9c 81       	ldd	r25, Y+4	; 0x04
 18e:	82 95       	swap	r24
 190:	92 95       	swap	r25
 192:	90 7f       	andi	r25, 0xF0	; 240
 194:	98 27       	eor	r25, r24
 196:	80 7f       	andi	r24, 0xF0	; 240
 198:	98 27       	eor	r25, r24
 19a:	8b 60       	ori	r24, 0x0B	; 11
 19c:	80 83       	st	Z, r24
			wait(500);
 19e:	84 ef       	ldi	r24, 0xF4	; 244
 1a0:	91 e0       	ldi	r25, 0x01	; 1
 1a2:	0e 94 36 00 	call	0x6c	; 0x6c <wait>
			PORTC = 0b0111 | (j << 4);
 1a6:	e5 e3       	ldi	r30, 0x35	; 53
 1a8:	f0 e0       	ldi	r31, 0x00	; 0
 1aa:	89 81       	ldd	r24, Y+1	; 0x01
 1ac:	9a 81       	ldd	r25, Y+2	; 0x02
 1ae:	82 95       	swap	r24
 1b0:	92 95       	swap	r25
 1b2:	90 7f       	andi	r25, 0xF0	; 240
 1b4:	98 27       	eor	r25, r24
 1b6:	80 7f       	andi	r24, 0xF0	; 240
 1b8:	98 27       	eor	r25, r24
 1ba:	87 60       	ori	r24, 0x07	; 7
 1bc:	80 83       	st	Z, r24
			wait(200);
 1be:	88 ec       	ldi	r24, 0xC8	; 200
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	0e 94 36 00 	call	0x6c	; 0x6c <wait>
	int i, j;
	// Configure PORTC Pins As Output.
	DDRC = 0xff;
	// Display 7-segments
	for(i = 0; i < 10; i++){
		for(j = 0; j < 10; j++){
 1c6:	89 81       	ldd	r24, Y+1	; 0x01
 1c8:	9a 81       	ldd	r25, Y+2	; 0x02
 1ca:	01 96       	adiw	r24, 0x01	; 1
 1cc:	9a 83       	std	Y+2, r25	; 0x02
 1ce:	89 83       	std	Y+1, r24	; 0x01
 1d0:	89 81       	ldd	r24, Y+1	; 0x01
 1d2:	9a 81       	ldd	r25, Y+2	; 0x02
 1d4:	8a 30       	cpi	r24, 0x0A	; 10
 1d6:	91 05       	cpc	r25, r1
 1d8:	b4 f2       	brlt	.-84     	; 0x186 <display7Segements+0x20>
void display7Segements() {
	int i, j;
	// Configure PORTC Pins As Output.
	DDRC = 0xff;
	// Display 7-segments
	for(i = 0; i < 10; i++){
 1da:	8b 81       	ldd	r24, Y+3	; 0x03
 1dc:	9c 81       	ldd	r25, Y+4	; 0x04
 1de:	01 96       	adiw	r24, 0x01	; 1
 1e0:	9c 83       	std	Y+4, r25	; 0x04
 1e2:	8b 83       	std	Y+3, r24	; 0x03
 1e4:	8b 81       	ldd	r24, Y+3	; 0x03
 1e6:	9c 81       	ldd	r25, Y+4	; 0x04
 1e8:	8a 30       	cpi	r24, 0x0A	; 10
 1ea:	91 05       	cpc	r25, r1
 1ec:	4c f2       	brlt	.-110    	; 0x180 <display7Segements+0x1a>
			wait(500);
			PORTC = 0b0111 | (j << 4);
			wait(200);
		}
	}
}
 1ee:	0f 90       	pop	r0
 1f0:	0f 90       	pop	r0
 1f2:	0f 90       	pop	r0
 1f4:	0f 90       	pop	r0
 1f6:	cf 91       	pop	r28
 1f8:	df 91       	pop	r29
 1fa:	08 95       	ret

000001fc <main>:

int main() {
 1fc:	df 93       	push	r29
 1fe:	cf 93       	push	r28
 200:	00 d0       	rcall	.+0      	; 0x202 <main+0x6>
 202:	cd b7       	in	r28, 0x3d	; 61
 204:	de b7       	in	r29, 0x3e	; 62
	// Set PortD PIN 4, 5, 6, 7 As Output
	int i;
	for(i = 0; i < 4; i++){
 206:	1a 82       	std	Y+2, r1	; 0x02
 208:	19 82       	std	Y+1, r1	; 0x01
 20a:	1a c0       	rjmp	.+52     	; 0x240 <main+0x44>
		SetPin(DDRD, (i + 4));
 20c:	a1 e3       	ldi	r26, 0x31	; 49
 20e:	b0 e0       	ldi	r27, 0x00	; 0
 210:	e1 e3       	ldi	r30, 0x31	; 49
 212:	f0 e0       	ldi	r31, 0x00	; 0
 214:	80 81       	ld	r24, Z
 216:	48 2f       	mov	r20, r24
 218:	89 81       	ldd	r24, Y+1	; 0x01
 21a:	9a 81       	ldd	r25, Y+2	; 0x02
 21c:	9c 01       	movw	r18, r24
 21e:	2c 5f       	subi	r18, 0xFC	; 252
 220:	3f 4f       	sbci	r19, 0xFF	; 255
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	02 2e       	mov	r0, r18
 228:	02 c0       	rjmp	.+4      	; 0x22e <main+0x32>
 22a:	88 0f       	add	r24, r24
 22c:	99 1f       	adc	r25, r25
 22e:	0a 94       	dec	r0
 230:	e2 f7       	brpl	.-8      	; 0x22a <main+0x2e>
 232:	84 2b       	or	r24, r20
 234:	8c 93       	st	X, r24
}

int main() {
	// Set PortD PIN 4, 5, 6, 7 As Output
	int i;
	for(i = 0; i < 4; i++){
 236:	89 81       	ldd	r24, Y+1	; 0x01
 238:	9a 81       	ldd	r25, Y+2	; 0x02
 23a:	01 96       	adiw	r24, 0x01	; 1
 23c:	9a 83       	std	Y+2, r25	; 0x02
 23e:	89 83       	std	Y+1, r24	; 0x01
 240:	89 81       	ldd	r24, Y+1	; 0x01
 242:	9a 81       	ldd	r25, Y+2	; 0x02
 244:	84 30       	cpi	r24, 0x04	; 4
 246:	91 05       	cpc	r25, r1
 248:	0c f3       	brlt	.-62     	; 0x20c <main+0x10>
		SetPin(DDRD, (i + 4));
		//SetPin(PORTD, (i + 4));
	}

	while(1){
		display3LedBuzzer();
 24a:	0e 94 64 00 	call	0xc8	; 0xc8 <display3LedBuzzer>
		display7Segements();
 24e:	0e 94 b3 00 	call	0x166	; 0x166 <display7Segements>
 252:	fb cf       	rjmp	.-10     	; 0x24a <main+0x4e>

00000254 <_exit>:
 254:	f8 94       	cli

00000256 <__stop_program>:
 256:	ff cf       	rjmp	.-2      	; 0x256 <__stop_program>
